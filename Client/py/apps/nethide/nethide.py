from lib.tofino.runtime import *
from lib.tofino.types import *
from lib.tofino.constants import *
from lib.utils.utils import *
from lib.engine.engine_controller import *


class SystemApp(EngineController):

    def __init__(self, bfrt_runtime:bfrt_runtime):
        super().__init__(bfrt_runtime)
        self.program_name = "NetHide"

    # Elements that need to be gathered from the manifest, need to appear as argument of the install method; otherwise they have been generated by the compiler
    def install(self, PFromExternal, PToExternal, PFromInternal, PToInternal, target_hw, program_id):
        # self._init_configs_()

        
        ########################################
        #######       PORTS CONFIG       #######
        ########################################

        if (target_hw):
            PFromExternal = self.runtime.get_dev_port(PFromExternal, 0)
            PToExternal = self.runtime.get_dev_port(PToExternal, 0)
            PFromInternal = self.runtime.get_dev_port(PFromInternal, 0)
            PToInternal = self.runtime.get_dev_port(PToInternal, 0)

        ########################################
        ####### CONSTANTS OF THE PROGRAM #######
        ########################################

        ROUTER_A_IP =  "10.10.1.0"
        ROUTER_A_MASK = 0xFFFFFF00
        ROUTER_B_IP =  "10.10.2.0"
        ROUTER_B_MASK = 0xFFFFFF00
        
        ########################################
        #######     PKT IDS GENERATED    #######
        ########################################

        # Is generated one packet id per rule, so n + 2 ()
        pkt_id_disabled                = 0
        pkt_id_all                     = 1
        pkt_id_p_external_router_a     = 2
        pkt_id_p_external_router_b     = 3
        pkt_id_def_forwarding          = 4
        
        
        ########################################
        #######     PREFILTER RULES      #######
        ########################################

        # Each body has a unique instruction number

        pkt_id  = pkt_id_p_external_router_a
        ni_f1   = 1
        ni_f2   = INSTRUCTION_FINISH
        original_port = PFromExternal

        self.pre_filter_mechanism.set_pkt_id(original_ig_port=[original_port, MASK_PORT], pkt_id=pkt_id, ni_f1=ni_f1, ni_f2=ni_f2,
                                            ipv4_dst_addr=[ROUTER_A_IP, ROUTER_A_MASK], program_id=program_id)

        pkt_id  = pkt_id_p_external_router_b
        ni_f1   = 2
        ni_f2   = INSTRUCTION_FINISH
        original_port = PFromExternal

        self.pre_filter_mechanism.set_pkt_id(original_ig_port=[original_port, MASK_PORT], pkt_id=pkt_id, ni_f1=ni_f1, ni_f2=ni_f2,
                                             ipv4_dst_addr=[ROUTER_B_IP, ROUTER_B_MASK],program_id=program_id)

        pkt_id  = pkt_id_def_forwarding
        ni_f1   = INSTRUCTION_FINISH
        ni_f2   = INSTRUCTION_FINISH
        original_port = PFromInternal

        self.pre_filter_mechanism.set_pkt_id(original_ig_port=[original_port, MASK_PORT], program_id=program_id, pkt_id=pkt_id, ni_f1=ni_f1, ni_f2=ni_f2)



        # ### Default Entry
        # pkt_id  = pkt_id_all
        # ni_f1   = 1
        # ni_f2   = INSTRUCTION_FINISH

        # ### set default
        # self.pre_filter_mechanism.set_default_entry(BaseAction("set_pkt_id", pkt_id, ni_f1, ni_f2))


        ########################################
        #######       GENERIC FWD        #######
        ########################################
        pkt_id  =  pkt_id_p_external_router_a
        port    =  PToInternal
        qid     =  0
        self.generic_fwd.fwd_and_enqueue(program_id=program_id,pkt_id=pkt_id, port=port, qid=qid)

        pkt_id  =  pkt_id_p_external_router_b
        port    =  PToInternal
        qid     =  0
        self.generic_fwd.fwd_and_enqueue(program_id=program_id,pkt_id=pkt_id, port=port, qid=qid)

        pkt_id  =  pkt_id_def_forwarding
        port    =  PToExternal
        qid     =  0
        self.generic_fwd.fwd_and_enqueue(program_id=program_id,pkt_id=pkt_id, port=port, qid=qid)


        ####### f1_i1 #######

        current_instr    = 1
        next_instruct    = INSTRUCTION_FINISH
        pkt_id           = pkt_id_p_external_router_a

        self.f1.i1_p1.fetch_ipv4_ttl(program_id=program_id,ni=current_instr, pkt_id=[pkt_id, MASK_PKT_ID])

        self.f1.i1_p2.sum_ni(program_id=program_id,ni=current_instr, pkt_id=[pkt_id, MASK_PKT_ID], instr_id=next_instruct, header_update=1, header_id=HEADER_IPV4_TTL, const_val=1)

        current_instr    = 2
        next_instruct    = INSTRUCTION_FINISH
        pkt_id           = pkt_id_p_external_router_b

        self.f1.i1_p1.fetch_ipv4_ttl(program_id=program_id,ni=current_instr, pkt_id=[pkt_id, MASK_PKT_ID])

        self.f1.i1_p2.sum_ni(program_id=program_id, ni=current_instr, pkt_id=[pkt_id, MASK_PKT_ID], instr_id=next_instruct, header_update=1, header_id=HEADER_IPV4_TTL, const_val=-1)


        self.write_phase_mechanism.set_write_phases(program_id=program_id, write_s10=1)
        
        # program_name = "NetHide"
        # program = Program(program_id, program_name)
        # program.set_write_phases(write_s10=1)
        # program.ports=set([PFromExternal, PToExternal, PFromInternal, PToInternal])
        # self.program_id_mechanism.add_program(program)


        # self._final_configs_()
        # self.program_enabler_mechanism.enable_program()
        # self.program_id_mechanism.set_program(program_id)
        return self

        # ####### Write Phase Configuration #######
        # self.write_phase_mechanism.set_write_phases(write_s10=1)
        # self.program_enabler_mechanism.enable_program()

        # self._final_configs_()
        # self.program_enabler_mechanism.enable_program()
        